var sax = require('sax')
  , util = require('util')
  , events = require('events');

function BikeStationsXmlParser() {
  if (!(this instanceof BikeStationsXmlParser)) {
    return new BikeStationsXmlParser(res);
  } else {
    events.EventEmitter.call(this);
    this.objName = 'station';
  }
}
util.inherits(BikeStationsXmlParser, events.EventEmitter);

BikeStationsXmlParser.prototype.parse = function(writeableStream) {
  var objs = []
    , currentTag = []
    , self = this
    , STRICT_MODE = true;
    
  var saxStream = sax.createStream(STRICT_MODE, {});    

  saxStream.on("error", function (e) {
    // unhandled errors will throw, since this is a proper node
    // event emitter.
    console.error("error!", e)
    // clear the error
    this._parser.error = null
    this._parser.resume()
  })
  saxStream.on("opentag", function(node) {
    currentTag.push(node.name);
    if (node.name == self.objName) {
      objs.push({});
    }
  })
  saxStream.on("closetag", function(tagName) {
    currentTag.pop();
    if (tagName == self.objName) {
      self.emit(self.objName, objs.pop());                  
    }
  })
  saxStream.on("text", function(text) {
    if (text.trim()) {
      objs[objs.length - 1][currentTag[currentTag.length - 1]] = text.trim(); 
    }
  });
  
  writeableStream.on('data', function(data) { // when the request gets data, write it to the saxStream
    saxStream.write(data);
  });  

  return this;  

};


module.exports = BikeStationsXmlParser;
